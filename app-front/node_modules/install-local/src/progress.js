"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
class ProgressKeeper {
    constructor(stream, pattern, maxTicks) {
        this.stream = stream;
        this.pattern = pattern;
        this.maxTicks = maxTicks;
        this.current = -1;
        this.tick();
    }
    tick(description) {
        this.current++;
        this.line();
        this.stream.write(this.pattern.replace(/:max/g, this.maxTicks.toString()).replace(/:count/g, this.current.toString()));
        if (description) {
            this.stream.write(` (${description})`);
        }
    }
    terminate() {
        this.line();
    }
    line() {
        if (this.stream.isTTY) {
            this.stream.clearLine();
            this.stream.cursorTo(0);
        }
        else {
            this.stream.write(os_1.default.EOL);
        }
    }
}
function progress(installer, stream = process.stdout) {
    let progressKeeper;
    installer.on('packing_start', _ => progressKeeper = new ProgressKeeper(stream, '[install-local] packing - :count/:max', _.length));
    installer.on('packed', pkg => progressKeeper.tick(path_1.default.basename(pkg)));
    installer.on('packing_end', () => progressKeeper.terminate());
    installer.on('install_start', toInstall => {
        const installPhrase = Object.keys(toInstall).map(_ => path_1.default.basename(_)).join(', ');
        if (installPhrase.length) {
            stream.write(`[install-local] installing into ${installPhrase}${os_1.default.EOL}`);
        }
        else {
            stream.write(`[install-local] nothing to install${os_1.default.EOL}`);
        }
    });
    installer.on('installed', (pkg, stdout, stderr) => {
        stream.write(`[install-local] ${pkg} installed${os_1.default.EOL}`);
        stream.write(stdout);
        stream.write(stderr);
        stream.write(os_1.default.EOL);
    });
    installer.on('install_end', () => stream.write(`[install-local] Done${os_1.default.EOL}`));
}
exports.progress = progress;
//# sourceMappingURL=progress.js.map